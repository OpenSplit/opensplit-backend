"""empty message

Revision ID: f743acde39cc
Revises: a8bef86f4475
Create Date: 2019-09-17 23:09:48.277527

"""
from alembic import op
import sqlalchemy as sa

from sqlalchemy import Column, Integer, String, DateTime, Boolean, ForeignKey

from sqlalchemy import orm
from sqlalchemy.ext.declarative import declarative_base


# revision identifiers, used by Alembic.
revision = 'f743acde39cc'
down_revision = 'a8bef86f4475'
branch_labels = None
depends_on = None

Base = declarative_base()

class User(Base):
    __tablename__ = 'user'
    id = Column(Integer, primary_key=True)
    email = Column(String(120), unique=True, nullable=False)
    name = Column(String(30), unique=True, nullable=False)

class Share(Base):
    __tablename__ = 'expense_assoc'
    user_id = Column(Integer, ForeignKey('user.id'), primary_key=True)
    expense_id = Column(Integer, ForeignKey('expense.id'), primary_key=True)
    amount = Column(Integer)

class Expense(Base):
    __tablename__ = 'expense'
    id = Column(Integer, primary_key=True)
    description = Column(String(120), nullable=False)
    amount = Column(Integer, nullable=False)
    date = Column(DateTime, nullable=False)
    is_payment = Column(Boolean, nullable=False, default=False)
    group_id = Column(Integer, ForeignKey('group.id'), nullable=False)
    paid_by = Column(Integer, ForeignKey('user.id'), nullable=False)

def split(amount, users):   
    share = amount // len(users)
    rest = amount - (len(users) * share)
    distribution = rest * [share + 1]
    distribution.extend((len(users) - rest) * [share])
    return distribution

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('expense_assoc', sa.Column('amount', sa.Integer(), nullable=True))
    # ### end sharesAlembic commands ###

    bind = op.get_bind()
    session = orm.Session(bind=bind)

    for expense in session.query(Expense):
        amount = expense.amount
        s = session.query(Share).filter_by(expense_id=expense.id).all()
        distribution = split(amount, s)
        for share, amount in zip(s, distribution):
            share.amount = amount
            session.add(share)
    session.commit()

            

def downgrade():
    pass
