"""empty message

Revision ID: a8bef86f4475
Revises: b779c40aad69
Create Date: 2018-12-21 22:08:03.005305

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'a8bef86f4475'
down_revision = 'b779c40aad69'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_constraint(None, 'history', type_='foreignkey')
    # op.create_foreign_key(None, 'history', 'expense', ['expense_id'], ['id'])
    # ### end Alembic commands ###

    # ALTER CONSTRAINT is not possible with SQLite3
    # so we have to improvise...

    # create temp table
    op.create_table('temp',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('date', sa.DateTime(), nullable=False),
        sa.Column('group_id', sa.Integer(), nullable=False),
        sa.Column('event_type', sa.String(length=60), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('expense_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['expense_id'], ['expense.id'], ),
        sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # Copy data from broken table to temp table
    op.execute("INSERT INTO temp SELECT * FROM history")

    # Drop old table
    op.drop_table('history')

    # Create history table again with correct ForeignKeys
    op.create_table('history',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('date', sa.DateTime(), nullable=False),
        sa.Column('group_id', sa.Integer(), nullable=False),
        sa.Column('event_type', sa.String(length=60), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.Column('expense_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['expense_id'], ['expense.id'], ),
        sa.ForeignKeyConstraint(['group_id'], ['group.id'], ),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )

    # Copy data from temp table to new history table
    op.execute("INSERT INTO history SELECT * FROM temp")

    # Drop temp table
    op.drop_table('temp')

def downgrade():
    # Point of no return..
    pass
