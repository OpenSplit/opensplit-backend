"""empty message

Revision ID: ef9dcf99616d
Revises: a8bef86f4475
Create Date: 2019-05-26 19:48:45.062912

"""
from alembic import op
import sqlalchemy as sa

from sqlalchemy import orm
from sqlalchemy.ext.declarative import declarative_base


# revision identifiers, used by Alembic.
revision = 'ef9dcf99616d'
down_revision = 'a8bef86f4475'
branch_labels = None
depends_on = None

Base = declarative_base()

class Expense(Base):
    __tablename__ = 'expense'
    id =sa.Column(sa.Integer, primary_key=True)
    description =sa.Column(sa.String(120), nullable=False)
    amount =sa.Column(sa.Integer, nullable=False)
    date =sa.Column(sa.DateTime, nullable=False)
    is_payment =sa.Column(sa.Boolean, nullable=False, default=False)
    group_id =sa.Column(sa.Integer, sa.ForeignKey('group.id'), nullable=False)
    paid_by =sa.Column(sa.Integer, sa.ForeignKey('user.id'), nullable=False)
    split_amongst = sa.relationship(
        "User",
        secondary=expense_assoc,
        back_populates="expenses")

class User(Base):
    __tablename__ = 'user'
    id =sa.Column(sa.Integer, primary_key=True)
    email =sa.Column(sa.String(120), unique=True, nullable=False)
    name =sa.Column(sa.String(30), unique=True, nullable=False)

class Share(Base):
    __tablename__ = 'share'
    id =sa.Column(sa.Integer, primary_key=True)
    expense_id =sa.Column(sa.Integer, ForeignKey('expense.id'))
    user_id =sa.Column(sa.Integer, ForeignKey('user.id'))
    amount =sa.Column(sa.Integer, nullable=False)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('share',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('expense_id', sa.Integer(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['expense_id'], ['expense.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

def main():
    # populate shares database for all existing expenses
    bind = op.get_bind()
    session = orm.Session(bind=bind)

    for expense in session.query(Expense):
        print(expense.amount)

if __name__ == "__main__":
    maino()


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('share')
    # ### end Alembic commands ###
